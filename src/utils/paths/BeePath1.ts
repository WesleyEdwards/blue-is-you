import { CANVAS_HEIGHT, CANVAS_WIDTH } from "../../game/helpers/constants";

export function path1() {
    const conversions = getConversions();
    const pts = [
        { x: conversions.x * 300, y: conversions.y * 1},
        { x: conversions.x * 300, y: conversions.y * 30},
        { x: conversions.x * 165, y: conversions.y * 145},
        { x: conversions.x * 120, y: conversions.y * 190},
        { x: conversions.x * 105, y: conversions.y * 250},
        { x: conversions.x * 135, y: conversions.y * 300},
        { x: conversions.x * 190, y: conversions.y * 320},
        { x: conversions.x * 250, y: conversions.y * 280},
        { x: conversions.x * 265, y: conversions.y * 170},
    ]
   return generatePointsOnBezierCurve(pts, 100);
}

type Point = {x: number, y: number};

//Generated by ChatGPT
function generatePointsOnBezierCurve(points: Point[], numOfPoints: number): Point[] {
    const bezierPoints: Point[] = [];
  
    for (let i = 0; i <= numOfPoints; i++) {
      const t = i / numOfPoints;
      const point = getBezierPoint(t, points);
      bezierPoints.push(point);
    }
  
    return bezierPoints;
  }
  
  function getBezierPoint(t: number, points: Point[]): Point {
    if (points.length === 1) {
      return points[0];
    }
  
    const nextPoints: Point[] = [];
    for (let i = 0; i < points.length - 1; i++) {
      const x = (1 - t) * points[i].x + t * points[i + 1].x;
      const y = (1 - t) * points[i].y + t * points[i + 1].y;
      nextPoints.push({ x, y });
    }
  
    return getBezierPoint(t, nextPoints);
  }

function getConversions() {
    return {
        x: CANVAS_WIDTH / 500,
        y: CANVAS_HEIGHT / 500
    }
}